diff -Naur a/sys/v4l2/gstv4l2videodec.c b/sys/v4l2/gstv4l2videodec.c
--- a/sys/v4l2/gstv4l2videodec.c	2015-10-22 10:02:54.000000000 +0200
+++ b/sys/v4l2/gstv4l2videodec.c	2018-03-15 10:39:30.226258804 +0100
@@ -293,6 +293,37 @@
   return GST_VIDEO_DECODER_CLASS (parent_class)->negotiate (decoder);
 }
 
+static gboolean
+gst_v4l2_decoder_cmd (GstV4l2Object * v4l2object, guint cmd, guint flags)
+{
+	struct v4l2_decoder_cmd dcmd = { 0, };
+
+	GST_DEBUG_OBJECT (v4l2object->element,
+			"sending v4l2 decoder command %u with flags %u", cmd, flags);
+	
+	if (!GST_V4L2_IS_OPEN (v4l2object))
+		return FALSE;
+
+	dcmd.cmd = cmd;
+	dcmd.flags = flags;
+	if (v4l2_ioctl (v4l2object->video_fd, VIDIOC_DECODER_CMD, &dcmd) < 0)
+		goto dcmd_failed;
+	
+	return TRUE;
+
+dcmd_failed:
+	if (errno == ENOTTY) {
+		GST_INFO_OBJECT (v4l2object->element,
+				"Failed to send decoder command %u with flags %u for '%s'. (%s)",
+				cmd, flags, v4l2object->videodev, g_strerror (errno));
+	} else {
+		GST_ERROR_OBJECT (v4l2object->element,
+				"Failed to send decoder command %u with flags %u for '%s'. (%s)",
+				cmd, flags, v4l2object->videodev, g_strerror (errno));
+	}
+	return FALSE;
+}
+
 static GstFlowReturn
 gst_v4l2_video_dec_finish (GstVideoDecoder * decoder)
 {
@@ -305,15 +336,28 @@
 
   GST_DEBUG_OBJECT (self, "Finishing decoding");
 
-  /* Keep queuing empty buffers until the processing thread has stopped,
-   * _pool_process() will return FLUSHING when that happened */
   GST_VIDEO_DECODER_STREAM_UNLOCK (decoder);
-  while (ret == GST_FLOW_OK) {
-    buffer = gst_buffer_new ();
-    ret =
-        gst_v4l2_buffer_pool_process (GST_V4L2_BUFFER_POOL (self->
-            v4l2output->pool), &buffer);
-    gst_buffer_unref (buffer);
+  
+  if (gst_v4l2_decoder_cmd (self->v4l2output, V4L2_DEC_CMD_STOP, 0)) {
+	  GstTask *task = decoder->srcpad->task;
+	  
+	  /* If the decoder stop command succeeded, just wait until processing is
+	   * finished */
+	  GST_OBJECT_LOCK (task);
+	  while (GST_TASK_STATE (task) == GST_TASK_STARTED)
+		  GST_TASK_WAIT (task);
+	  GST_OBJECT_UNLOCK (task);
+	  ret = GST_FLOW_FLUSHING;
+  } else {
+	  /* otherwise keep queuing empty buffers until the processing thread has
+	   * stopped, _pool_process() will return FLUSHING when that happened */
+	  while (ret == GST_FLOW_OK) {
+		  buffer = gst_buffer_new ();
+		  ret =
+			  gst_v4l2_buffer_pool_process (GST_V4L2_BUFFER_POOL (self->
+						  v4l2output->pool), &buffer);
+		  gst_buffer_unref (buffer);
+	  }
   }
 
   /* and ensure the processing thread has stopped in case another error
