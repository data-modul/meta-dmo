From 0857b05963db26879fe10c71a4c54bc94264ef90 Mon Sep 17 00:00:00 2001
From: Zahari Doychev <zahari.doychev@linux.com>
Date: Tue, 23 Jun 2015 14:31:42 +0200
Subject: [PATCH 01/10] gstreamer: hack v4l2sink in playbin

This is a workaround that forces usage of v4l2sink and v4l2convert in the
playbin pipelin.

Signed-off-by: Zahari Doychev <zahari.doychev@linux.com>
---
 .../mediaplayer/qgstreamerplayersession.cpp        | 76 ++++++++++++++++++++--
 .../mediaplayer/qgstreamerplayersession.h          |  2 +
 2 files changed, 72 insertions(+), 6 deletions(-)

diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp b/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp
index 4dce341..a1cafdd 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp
@@ -56,8 +56,10 @@
 #include <QtCore/qdir.h>
 #include <QtCore/qstandardpaths.h>
 
-//#define DEBUG_PLAYBIN
-//#define DEBUG_VO_BIN_DUMP
+#define DEBUG_PLAYBIN
+#define DEBUG_VO_BIN_DUMP
+
+#define ZDO_TEST
 
 QT_BEGIN_NAMESPACE
 
@@ -114,6 +116,7 @@ QGstreamerPlayerSession::QGstreamerPlayerSession(QObject *parent)
 #if !GST_CHECK_VERSION(1,0,0)
      m_usingColorspaceElement(false),
 #endif
+     m_v4l2sink(0),
      m_pendingVideoSink(0),
      m_nullVideoSink(0),
      m_audioSink(0),
@@ -161,7 +164,13 @@ QGstreamerPlayerSession::QGstreamerPlayerSession(QObject *parent)
         } else {
             flags |= GST_PLAY_FLAG_NATIVE_VIDEO;
 #endif
+
         }
+
+#if defined(ZDO_TEST)
+	flags |=  GST_PLAY_FLAG_NATIVE_VIDEO;
+#endif
+
         g_object_set(G_OBJECT(m_playbin), "flags", flags, NULL);
 
         GstElement *audioSink = gst_element_factory_make("autoaudiosink", "audiosink");
@@ -194,6 +203,11 @@ QGstreamerPlayerSession::QGstreamerPlayerSession(QObject *parent)
 
 #if GST_CHECK_VERSION(1,0,0)
     m_videoIdentity = gst_element_factory_make("identity", NULL); // floating ref
+
+#if defined(ZDO_TEST)
+    m_videoConverter = gst_element_factory_make("v4l2video4convert", NULL);
+#endif
+
 #else
     m_videoIdentity = GST_ELEMENT(g_object_new(gst_video_connector_get_type(), 0)); // floating ref
     g_signal_connect(G_OBJECT(m_videoIdentity), "connection-failed", G_CALLBACK(insertColorSpaceElement), (gpointer)this);
@@ -207,12 +221,21 @@ QGstreamerPlayerSession::QGstreamerPlayerSession(QObject *parent)
     g_object_set(G_OBJECT(m_nullVideoSink), "sync", true, NULL);
     gst_object_ref(GST_OBJECT(m_nullVideoSink));
 
+#if !defined(ZDO_TEST)
     m_videoOutputBin = gst_bin_new("video-output-bin");
     // might not get a parent, take ownership to avoid leak
     qt_gst_object_ref_sink(GST_OBJECT(m_videoOutputBin));
     gst_bin_add_many(GST_BIN(m_videoOutputBin), m_videoIdentity, m_nullVideoSink, NULL);
     gst_element_link(m_videoIdentity, m_nullVideoSink);
-
+#else
+    m_videoOutputBin = gst_bin_new("video-output-bin");
+    // might not get a parent, take ownership to avoid leak
+    qt_gst_object_ref_sink(GST_OBJECT(m_videoOutputBin));
+    gst_bin_add_many(GST_BIN(m_videoOutputBin), m_videoIdentity, m_videoConverter,  NULL);
+    bool linked = gst_element_link_many(m_videoIdentity, m_videoConverter,  NULL);
+    if (!linked)
+	qWarning() << "Cannot link output bin elements: identity, converter";
+#endif
     m_videoSink = m_nullVideoSink;
 
     // add ghostpads
@@ -595,12 +618,47 @@ void QGstreamerPlayerSession::setVideoRenderer(QObject *videoOutput)
             gst_element_unlink(m_colorSpace, m_videoSink);
             gst_bin_remove(GST_BIN(m_videoOutputBin), m_colorSpace);
         } else {
-            gst_element_unlink(m_videoIdentity, m_videoSink);
-        }
+#if ZDO_TEST
+	gst_element_unlink(m_videoConverter, m_nullVideoSink);
+#else
+	gst_element_unlink(m_videoIdentity, m_videoSink);
+#endif
+	}
 #endif
 
         removeVideoBufferProbe();
 
+#if defined(ZDO_TEST)
+	bool linked = true;
+	if (!m_v4l2sink) {
+		qWarning() << "EXPERIMENTAL: force v4l2sink";
+		m_v4l2sink = gst_element_factory_make("v4l2sink", "v4l2sink");
+
+		GstCaps *caps;
+		caps =
+		     gst_caps_new_simple("video/x-raw", "format", G_TYPE_STRING, "RGB",
+						"width", G_TYPE_INT, 800,
+						"height", G_TYPE_INT, 480, NULL);
+
+		/* setup IPU converter */
+		g_object_set(m_videoConverter, /*"output-io-mode", 5,*/
+					"capture-io-mode", 4,
+						   NULL);
+		/* setup IPU overlay output */
+		g_object_set(m_v4l2sink,
+			     "device", "/dev/video/by-name/imx-ipuv3-ovl-0",
+			     "io-mode", 5,
+			     "sync", TRUE,
+			     "overlay-top", 130,
+			     "overlay-left", 30,
+			     "overlay-width", 800,
+			     "overlay-height", 480, NULL);
+		gst_bin_add(GST_BIN(m_videoOutputBin), m_v4l2sink);
+		linked = gst_element_link_filtered(m_videoConverter, m_v4l2sink, caps);
+		gst_caps_unref(caps);
+	}	
+	m_videoSink = m_v4l2sink;
+#else
         gst_bin_remove(GST_BIN(m_videoOutputBin), m_videoSink);
 
         m_videoSink = videoSink;
@@ -608,6 +666,9 @@ void QGstreamerPlayerSession::setVideoRenderer(QObject *videoOutput)
         gst_bin_add(GST_BIN(m_videoOutputBin), m_videoSink);
 
         bool linked = gst_element_link(m_videoIdentity, m_videoSink);
+#endif
+
+
 #if !GST_CHECK_VERSION(1,0,0)
         m_usingColorspaceElement = false;
         if (!linked) {
@@ -1022,7 +1083,7 @@ void QGstreamerPlayerSession::setSeekable(bool seekable)
 #ifdef DEBUG_PLAYBIN
         qDebug() << Q_FUNC_INFO << seekable;
 #endif
-    if (seekable != m_seekable) {
+    if (0 && seekable != m_seekable) {
         m_seekable = seekable;
         emit seekableChanged(m_seekable);
     }
@@ -1442,9 +1503,12 @@ void QGstreamerPlayerSession::updateVideoResolutionTag()
 
     gst_object_unref(GST_OBJECT(pad));
 
+
     QSize currentSize = m_tags.value("resolution").toSize();
     QSize currentAspectRatio = m_tags.value("pixel-aspect-ratio").toSize();
 
+    qDebug() << "Size: " << size << ", " << currentSize << ", " << currentAspectRatio;
+
     if (currentSize != size || currentAspectRatio != aspectRatio) {
         if (aspectRatio.isEmpty())
             m_tags.remove("pixel-aspect-ratio");
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.h b/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.h
index 8032f2c..888a553 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.h
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.h
@@ -198,6 +198,8 @@ private:
 
     GstElement* m_videoOutputBin;
     GstElement* m_videoIdentity;
+    GstElement* m_videoConverter;
+    GstElement* m_v4l2sink;
 #if !GST_CHECK_VERSION(1,0,0)
     GstElement* m_colorSpace;
     bool m_usingColorspaceElement;
-- 
2.5.2

